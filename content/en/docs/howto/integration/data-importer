---
title: "Data Importer Extension"
url: /howto/integration/data-importer/
weight: 21
description: "Overview of the Data Importer in Studio Pro"
#If moving or renaming this doc file, implement a temporary redirect and let the respective team know they should update the URL in the product. See Mapping to Products for more details.
---

## 1 Introduction

Data is constantly exchanged between various systems inside and outside an organization. Microsoft Excel is a common spreadsheet software where data is stored in a tabular grid of rows and columns and has a structure that can be beneficial in your app.

This how-to teaches you to do the following:

* Create a *Data Importer document* using a sample representative file
* Create a (non-persistable) entity in your domain model
* Import data using the custom *Import data from file* activity

## 2 Prerequisites

Download the [Data Importer extension](https://marketplace.mendix.com/link/component/219833) from the Marketplace and [add it into your app](/appstore/overview/use-content/#install). This module also requires:

* Studio Pro [10.4](/releasenotes/studio-pro/10.4/) or above
* A file document (see [File Manager](/refguide/file-manager/))

## 3 Design Time Flow

The Data Importer allows you to import an Excel file into your Mendix App. It allows you to choose which sheet to import data from and which columns you want to import. During the design-time flow, you can preview the data that you would like to import and create a non-persistable entity (NPE) in your domain model. At the end of this you would have a *Data Importer Document* which you can use along with a custom activity *Import data from file* in a microflow to import data from input Excel file(s).

### 3.1 Creating a Data Importer Document

To create a new Data Importer Document definition, right-click on the module and click **Add other** > **Data Importer**.

{{< figure src="/attachments/refguide/integration/data-importer-extension/data-importer-menu.png" >}}

Name the document, click **OK**, and the new Data Importer document opens. At this juncture you can upload a sample representative input file that you would like to define mapping for.  

### 3.2 Previewing Data {#preview-data}

Click **Select a local file** to import an Excel file (*.xls* or *.xslx*).

{{< figure src="/attachments/refguide/integration/data-importer-extension/select-file-for-preview.png" >}}

Select or drop the file in the **Select Source File** window. An excel workbook can have either single or multiple sheets; you can choose which sheet to import data from and specify the header row and starting data row.

* **Sheet Name** – name of the worksheet from where data needs to be imported; if the Excel has multiple worksheets, their names will appear in the dropdown.
* **Header Row No.** – row number of the file header; the default is 1
* **Read Data From Row No.** – starting line for reading data; the default is 2

{{< figure src="/attachments/refguide/integration/data-importer-extension/select-sheet-and-header-data-row.png" >}}

Click **Preview Source Data & Entity** to view the data from the file. The first 10 data rows from the source file are shown in the data preview section. If there are less than 10 data rows in the sample file, then only the available rows are shown. The column names correspond to the attribute name within the entity and the Sheet name will be used to define the Entity.

All the columns are selected (checked) by default for import. You can uncheck the columns you do not want to import. At the bottom of the table, you can see the target data type of the attribute, which is based on the cell-type defined in the input excel's first data row. If any data types are incorrect, check the cell type of the *first* data row in Excel and adjust the cell-type definition accordingly.

{{% alert color="warning" %}} Column names that do not adhere to Mendix naming conventions will be autocorrected. In case of *Number* cell-type the target Mendix type will be mapped to *Decimal* to accommodate Integers & Decimals. {{% /alert %}}

{{< figure src="/attachments/refguide/integration/data-importer-extension/preview-data-and-entity.png" >}}

### 3.3 Creating an Entity {#create-entity}

You can view the entity in the Entity Preview section. You can change the name of the entity, though one is suggested for you based on the Sheet Name. To create the entity in your domain model, click **Create Entity** > **OK**. You will be shown a confirmation message that an Entity has been created in the Domain model and it can be readily used.

When the entity is created, you can view the mapping of the source Excel columns to the target entity attributes as shown in the image below. 

{{< figure src="/attachments/refguide/integration/data-importer-extension/source-to-target-mapping.png" >}}

The Data Importer document creation is complete and can be used to import data in a microflow.

## 4 Building your App {#build-data-importer-app}

Say you want to periodically import data from an Excel file which is generated by some other App or enterprise system. You would like to validate if the data is correct and can be imported with the given mapping without any errors. Let's try to build an App which will achieve this using Data Importer.

But before that a little background about the Data Importer extension : It requires [run-time module](https://marketplace.mendix.com/link/component/219833) from Marketplace to help you achieve your goals. So search the Data Importer module in the *Marketplace* and import it. The DataImporter module should be visible under the Marketplace modules in your App as shown below.

{{< figure src="/attachments/refguide/integration/data-importer-extension/data-importer-in-marketplace-module.png" >}}

### 4.1 Custom Activity {#Import-data-from-file}

The **Import data from file** activity can be found under **Integration activities** in the **Toolbox**. On double-click you can view its properties:

{{< figure src="/attachments/refguide/integration/data-importer-extension/custom-activity-params.png" >}}

The following are the properties in the **Input** section:

* **File** – name of file from which you want to import data
* **Data importer document** – the Data importer document created at the end of design-time flow.

The following are the properties in the **Output** section:

* **Return Type** – will be set to List of the NPE defined for the Data importer document.
* **Variable name** – will be auto-populated as well to *EntityName*List

### 4.2 Build the Pages

As the *Import data from file* custom activity needs an input file from where data needs to be imported, let's build a page where a *System.FileDocument* can be uploaded and then be fed to our custom activity.

1. Add a Button on the home page with a caption 'Upload Customer Data'
2. On click of this button you can create an Object of System.FileDocument and pass the control to another page (UploadCustomerData) where file can be uploaded.

{{< figure src="/attachments/refguide/integration/data-importer-extension/home-page-button.png" >}}

3. On the 'UploadCustomerData' page - include a Data view for FileDocument and include a 'File Manager' to assist a file upload.
4. Add an Action button to call Microflow which will help us import the input file. The uploaded file will be passed as a parameter to this Microflow.

{{< figure src="/attachments/refguide/integration/data-importer-extension/data-view-file-manager.png" >}}

### 4.3 Import a Microflow

5. Create a new microflow and drag the **Import data from file** activity into it. You can find this activity under "Integration activities".

   {{< figure src="/attachments/refguide/modeling/integration/data-importer-extension/integration-activity.png" >}}

6. As soon as the **Import data from file** activity is added into Microflow, you will start seeing 3 errors in the console; mainly complaining aobut missing input file, data importer document and Output variable being empty.

   {{< figure src="/attachments/refguide/modeling/integration/data-importer-extension/custom-activity.png" >}}

7. Let's try to address these errors. Double-click the activity and in the **File** field, choose the input file that is passed on from the file upload page to this Microflow as a parameter.
8. In the **Data importer document** field, click *Select* and choose the Data Importer document you want to use.

  {{< figure src="/attachments/refguide/modeling/integration/data-importer-extension/choose-data-importer-template.png" >}}

9. After selecting the Data Importer document, the **Return type** and **Variable name** will be autopopulated. You can also change the name  of the output variable if you wish.
10. Click **OK**. The custom activity is configrued and all the errors should be gone now.

  {{< figure src="/attachments/refguide/modeling/integration/data-importer-extension/configured-custom-activity.png" >}}

11. Next you can add an *Aggregate list* activity and configure it to count the size of the CustomerList which is returned from our previous activity.

  {{< figure src="/attachments/refguide/modeling/integration/data-importer-extension/aggregate-list.png" >}}

12. Configure a *Show Message* activity next. You can use a template message and a parameter which can be as shown below.

  {{< figure src="/attachments/refguide/modeling/integration/data-importer-extension/show-message-with-list-size.png" >}}

13. You can set $CustomerList as return value from the *Import data from file* activity to be further used. Your completed microflow should look like below.

  {{< figure src="/attachments/refguide/modeling/integration/data-importer-extension/example-microflow.png" >}}

14. Deploy your app locally and browse and upload an input file which is similar to the file that was used as a template while creating Data Importer document.
15. Validate that you see a message stating *Imported xx rows from input file into a list of NPEs*

  {{< figure src="/attachments/refguide/modeling/integration/data-importer-extension/local-app-run.png" >}}

Bravo! you have successfully configured & used the Data importer. You can extend this as per your requirements; you can convert the list of NPEs into persistable entities by providing Message definition or using for-each loop construct and individually creating & committing entities into your database.
